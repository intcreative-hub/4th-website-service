// This is your Prisma schema file for Website 3rd Tier
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for customer authentication (4th Tier)
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String    // bcrypt hashed password
  name      String
  phone     String?
  role      String    @default("customer") // customer, admin
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  orders    Order[]   @relation("CustomerOrders")
  addresses Address[]
  wishlist  Wishlist[]
  reviews   Review[]

  @@index([email])
}

// Contact form submissions
model ContactSubmission {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  service   String?
  message   String
  status    String   @default("new") // new, read, responded
  createdAt DateTime @default(now())

  @@index([email])
  @@index([createdAt])
}

// Appointment/Booking system
model Appointment {
  id            String   @id @default(cuid())
  customerName  String
  customerEmail String
  customerPhone String
  service       String
  date          DateTime
  time          String
  duration      Int      @default(60) // minutes
  notes         String?
  status        String   @default("pending") // pending, confirmed, cancelled, completed
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([date])
  @@index([status])
  @@index([customerEmail])
}

// Blog posts
model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String   @db.Text
  coverImage  String?
  author      String   @default("Admin")
  category    String?
  tags        String[] // Array of tags
  published   Boolean  @default(false)
  views       Int      @default(0)
  readTime    Int      @default(5) // minutes
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([slug])
  @@index([published])
  @@index([category])
}

// E-commerce products
model Product {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String           @db.Text
  price           Float
  salePrice       Float?
  images          String[]         // Array of image URLs
  category        String
  stock           Int              @default(0)
  sku             String?          @unique
  featured        Boolean          @default(false)
  active          Boolean          @default(true)
  tags            String[]
  variants        Json?            // Legacy: For sizes, colors, etc.
  badges          String[]         @default([]) // NEW: Product badges (New, Sale, Featured, Bestseller)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderItems      OrderItem[]
  productVariants ProductVariant[] // NEW: Proper variant tracking
  reviews         Review[]         // NEW: Product reviews
  wishlist        Wishlist[]       // NEW: Wishlist items

  @@index([slug])
  @@index([category])
  @@index([featured])
  @@index([active])
}

// Orders
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?     // NEW: Link to customer account (optional for guest checkout)
  user            User?       @relation("CustomerOrders", fields: [userId], references: [id])
  customerName    String
  customerEmail   String
  customerPhone   String?
  shippingAddress Json?       // Flexible address structure
  billingAddress  Json?
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  discount        Float       @default(0) // NEW: Coupon discount
  couponCode      String?     // NEW: Applied coupon code
  total           Float
  status          String      @default("pending") // pending, processing, shipped, delivered, cancelled
  paymentStatus   String      @default("pending") // pending, paid, failed, refunded
  paymentId       String?     // Stripe payment intent ID
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]

  @@index([orderNumber])
  @@index([userId])
  @@index([customerEmail])
  @@index([status])
  @@index([createdAt])
}

// Order items (products in an order)
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  name      String   // Snapshot of product name at time of purchase
  price     Float    // Snapshot of price at time of purchase
  quantity  Int
  subtotal  Float
  variant   Json?    // Selected variant (size, color, etc.)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// Newsletter subscribers
model Newsletter {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  status        String   @default("active") // active, unsubscribed
  source        String?  // Where they signed up (footer, popup, etc.)
  confirmedAt   DateTime?
  unsubscribedAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@index([status])
}

// =========================================
// 4TH TIER ($1000) NEW MODELS
// =========================================

// Customer saved addresses
model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String
  zip       String
  country   String   @default("USA")
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([isDefault])
}

// Customer wishlist
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // Prevent duplicate wishlist items
  @@index([userId])
  @@index([productId])
}

// Product reviews with moderation
model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int      // 1-5 stars
  comment   String   @db.Text
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
  @@index([approved])
  @@index([createdAt])
}

// Product variants (size, color, etc.) with inventory tracking
model ProductVariant {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  name       String   // e.g., "Small - Blue"
  sku        String   @unique
  price      Float?   // Override product price if different
  stock      Int      @default(0)
  attributes Json     // { size: "S", color: "blue" }
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([productId])
  @@index([sku])
  @@index([active])
}

// Coupon/discount codes
model Coupon {
  id          String    @id @default(cuid())
  code        String    @unique
  description String?
  discount    Float     // Amount or percentage
  type        String    // "PERCENTAGE" | "FIXED"
  minPurchase Float?    // Minimum purchase amount
  maxUses     Int?      // Maximum total uses
  usedCount   Int       @default(0)
  expiresAt   DateTime?
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([code])
  @@index([active])
  @@index([expiresAt])
}

// Promotional banners
model PromoBanner {
  id        String    @id @default(cuid())
  title     String
  message   String    @db.Text
  link      String?
  linkText  String?   @default("Learn More")
  bgColor   String?   @default("gradient") // gradient, purple, emerald, custom
  startDate DateTime?
  endDate   DateTime?
  priority  Int       @default(0) // Higher number = higher priority
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([active])
  @@index([priority])
  @@index([startDate])
  @@index([endDate])
}
